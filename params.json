{"name":"Trabajando-con-paas","tagline":"Trabajando con Platform as a Service, para el curso de cloud computing del CEP de Jaén","body":"Trabajando con Plataformas como servicio.\r\n===================\r\n\r\n##Objetivos\r\n\r\n1. Conocer herramientas de desarrollo rápido de aplicaciones web en node.\r\n2. Conocer las diferentes plataformas *freemium* PaaS existentes.\r\n3. Entender el concepto de PaaS y como se relaciona con los otros niveles de la nube.\r\n\r\n## Introducción\r\n\r\nCuando uno quiere parte del trabajo ya hecho, o al menos preparado para hacer con la pulsación de un botón, a la vez que tiene flexibilidad para trabajar con marcos de aplicaciones más allá de lo que ofrece programar *plugins* (como en el SaaS), necesita un [Platform as a Service o PaaS](http://en.wikipedia.org/wiki/Platform_as_a_service). Un PaaS proporciona una pila que incluye, generalmente, almacenamiento de datos, un marco concreto para trabajar (tal como Django o Ruby on Rails) y, adicionalmente, un servidor web.\r\n\r\nEsto conlleva una cierta falta de flexibilidad: se pueden usar las pilas que hay y el usuario sólo puede subir su aplicación que use esa pila, no instalar elementos adicionales que necesiten permisos de superusuario. Pero, por otro lado, ofrece la comodidad de tener que concentrarse sólo en la aplicación en sí y no en la infraestructura. Es, por eso, menos *DevOps* que una solución *IaaS*, pero por otro lado también tiene una parte que es la configuración y despliegue de la aplicación en sí y los tests que se vayan a usar.\r\n\r\nUsando un servicio PaaS\r\n-----\r\n\r\nLa mayoría de los servicios PaaS están ligados a una pila de\r\nsoluciones determinada o a un vendedor determinado. Han surgido\r\nmuchos, por ejemplo, en torno a [node.js](http://nodejs.org), un\r\nintérprete de JavaScript asíncrono que permite crear fácilmente\r\naplicaciones REST.\r\n\r\nAlgunos servicios PaaS son específicos (sólo alojan una solución\r\ndeterminada, como [CloudAnt](https://cloudant.com/) que aloja una base\r\nde datos con CouchDB o genéricos), permitiendo una serie de soluciones\r\nen general relativamente limitada; [Heroku](http://www.heroku.com) y\r\n[OpenShift](http://www.openshift.com) están entre estos últimos. \r\n\r\n> Darse de alta en algún servicio PaaS tal como Heroku, [Nodejitsu](https://www.nodejitsu.com/) u OpenShift.\r\n\r\nEstos servicios proveen un número limitado de máquinas virtuales y\r\nsiguen en general un modelo *freemium*: capacidades básicas son\r\ngratuitas y para conseguir mayores prestaciones o un uso más\r\nintensivo, o bien capacidades que no entren en el paquete básico, hay\r\nque pasar al modelo de pago. Estas máquinas virtuales se denominan\r\n[*dynos*](https://devcenter.heroku.com/articles/dynos) en Heroku y\r\nsimplemente aplicaciones en OpenShift, aunque los *dynos* son mucho\r\nmás flexibles que las aplicaciones de OpenShift.\r\n\r\nLa interacción con los PaaS se hace en general a través de una\r\nherramienta de línea de órdenes que permite, para empezar, crear\r\nfácilmente a partir de una plantilla una aplicación básica con las\r\ncaracterísticas definidas; en ambos casos habrá que descargar una\r\naplicación libre para llevar a cabo ciertas tareas como monitorizar el\r\nestatus y hacer tests básicos; una vez creado el fuente de la\r\naplicación el despliegue en la máquina virtual se hace mediante\r\n`git` tal como hemos contado anteriormente. \r\n\r\nLos lenguajes más habituales en las PaaS son los de scripting, que\r\npermiten crear aplicaciones rápidamente; las bases de datos\r\ndisponibles son tanto las clásicas DBMS aunque, con más frecuencia, se\r\nusan las bases de datos NoSQL como MongoDB, Redis o CouchDB.\r\n\r\nEn cualquier caso, los PaaS suelen tener un panel de control que\r\npermite hacer ciertas cosas como configurar *plugins* o *add-ons*\r\ndesde la web fácilmente. Estos suelen seguir el mismo modelo freemium:\r\ndiferentes tamaños o instancias son gratuitas o tienen un coste; en\r\nalgunos casos cualquier instancia tiene un coste. \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}